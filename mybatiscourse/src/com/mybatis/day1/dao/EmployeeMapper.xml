<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.day1.dao.EmployeeMapper">
    <select id="getEmpById" resultType="emp" databaseId="mysql">
    <!--#{id}
        1：支持OGNL的表达式 #{id}  在这里单个参数的时候就是代表传入的值的参数 这里可以随便写
        2：用户名没有
            select * from employee   列：id last_name  email  gender   对象属性赋值
            一般情况下为了不必要的麻烦，最好属性名和sql的列名相同，但是也可以不同 这里也不用写，但是要配置驼峰命名规范
            lastName  列名数据库last_Name===lastName（属性）
    -->
       select * from employee where id = #{id}
       <!--select  loc email ,dname lastName from dept  where deptno=#{id}-->

    </select>
    <select id="getEmpById" resultType="emp" databaseId="oracle">
        select  loc email ,dname lastName from dept  where deptno=#{id}
    </select>
    <!-- pojo传进来 那参数就是列名-->
    <!--void addEmployee(Employee employee);-->
    <insert id="addEmployee" parameterType="com.mybatis.day1.Employee">
            insert into employee values(#{id},#{lastName},#{email},#{gender})
    </insert>
   <!-- void delelteEmpById(Integer id);-->
    <delete id="delelteEmpById">
        delete from employee where id=#{id}
    </delete>

    <!--void updateEmp(Employee employee);-->
    <update id="updateEmp">
        update employee set last_name=#{lastName},gender=#{gender},email=#{email} where id=#{id}
    </update>
    <!--List findAll();
        查询的时候要么给resultType或者是resultMap
        jdbc 关联查询
        接口返回值是List  那么resultType就集合里面装的元素的类型
    -->
    <select id="findAll" resultType="com.mybatis.day1.Employee">
        select * from employee
    </select>
    <!--Employee findByNameAndEmail(String lastName,String email);-->
    <select id="findByNameAndEmail" resultType="com.mybatis.day1.Employee">
<!--当参数大于1 的是 mybatis 只支持 01  param1 param2  你想用列名必须在我们的接口中加上param-->
        select id,last_name lastName,email,gender from employee where last_name=#{lastName} and email=#{email}
<!-- select id,last_name lastName,email,gender from employee where last_name=#{0} and email=#{1}
        select id,last_name lastName,email,gender from employee where last_name=#{param1} and email=#{param2}-->
    </select>
    <!--void addEmployee(Employee employee); 使用mysql自增主键-->
    <insert id="addEmpByIncrementId" parameterType="com.mybatis.day1.Employee" useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        insert into employee (last_name,email,gender) values(#{lastName},#{email},#{gender})
    </insert>

    <!--void addEmployee(Employee employee); 使用oracle自增主键
        调用sequence.nextval from dual
         EMPNO                                     NOT NULL NUMBER(4)
         ENAME                                              VARCHAR2(10)
         JOB                                                VARCHAR2(9)
         MGR                                                NUMBER(4)
         HIREDATE                                           DATE
         SAL                                                NUMBER(7,2)
         COMM                                               NUMBER(7,2)
         DEPTNO                                             NUMBER(2)
    -->
    <insert id="addEmpByIncrementId" parameterType="com.mybatis.day1.Employee"  databaseId="oracle">
            <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
             <!--  BEFORE运行顺序：
                先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
                在运行插入的sql；就可以取出id属性对应的值
                AFTER运行顺序：
                先运行插入的sql（从序列中取出新值作为id）；
                再运行selectKey查询id的sql；把ID赋值给对象属性但是必须是currval 方法
                所以一般用before-->
                <!-- 编写查询主键的sql语句 -->
                <!-- BEFORE-->
                select emp_seq.nextval from dual
                <!-- AFTER：
                 select EMPLOYEES_SEQ.currval from dual -->
            </selectKey>
            insert into employee (id,last_name,email,gender) values(${id},#{lastName},#{email},#{gender})
    </insert>
</mapper>